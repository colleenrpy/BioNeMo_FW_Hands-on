name: esm2nv_flip
defaults:
  - pretrain_esm2_650M # options: pretrain_esm2_3B, pretrain_esm2_15B, pretrain_esm2_8M
do_preprocessing: False
do_training: True # set to false if data preprocessing steps must be completed
do_testing: True # set to true to run evaluation on test data after training
restore_from_path: null # path to nemo checkpoint of the fine-tuned model (encoder + task head) to be used for further training, testing or inference
target: bionemo.model.protein.esm1nv.ESM2nvLoRAModel # target class for protein model
infer_target: bionemo.model.protein.esm1nv.infer.ESM1nvInference # target inference class for protein model

trainer:
  devices: 1 # number of GPUs or CPUs
  num_nodes: 1 
  max_epochs: 1
  val_check_interval: 20
  limit_val_batches: 1000 # number of batches in validation step, use fraction for fraction of data, 0 to disable
  limit_test_batches: 1000 # number of batches in test step, use fraction for fraction of data, 0 to disable
  enable_checkpointing: True

wandb_artifacts:
  wandb_use_artifacts_data: True
  wandb_use_artifact_data_path: '${oc.env:WANDB_ENTITY}/${oc.env:WANDB_PROJECT}/downstream_taskdataset:v0'
  wandb_use_artifacts_model: True
  wandb_use_artifact_model_path: '${oc.env:WANDB_ENTITY}/${oc.env:WANDB_PROJECT}/esm2nv_650m:v0'

exp_manager:
  wandb_logger_kwargs:
    project: ${oc.env:WANDB_PROJECT}
    name: ${name}_${model.data.task_name}_finetuning_encoder_frozen_${model.encoder_frozen}
    job_type: 'finetuning'
  create_checkpoint_callback: False # to avoid conflict with trainer.enable_checkpointing

model:
  restore_encoder_path: ${oc.env:BIONEMO_HOME}/models/protein/esm2nv/esm2nv_650M_converted.nemo # path to nemo checkpoint of the protein model. Other options: esm2nv_3B_converted.nemo
  encoder_frozen: False # encoder trainable or frozen; set to False when using peft
  post_process: False # must be False for downstream task
  micro_batch_size: 8 # NOTE: adjust to occupy ~ 90% of GPU memory
  global_batch_size: null # if null will be computed automatically
  tensor_model_parallel_size: 1  # model parallelism
  cnn_dim: 32
  dropout_rate: 0.25
  megatron_amp_O2: False #Required by NLPAdapterModelMixin for PEFT
  
  peft:
    enabled: True # indicates whether we intend to use PEFT technique
    peft_scheme: "lora"  # currently supported: lora
    restore_from_path: null #set to null to initialize random weights and train
    
    lora_tuning:
      adapter_dim: 32
      adapter_dropout: 0.0
      column_init_method: 'xavier' # options: xavier, zero or normal
      row_init_method: 'zero' # options: xavier, zero or normal
      layer_selection: null  # selects in which layers to add lora adapters. e.g. [1,12] will add lora to layer 1 (lowest) and 12. null will apply adapters to all layers
      weight_tying: False
      position_embedding_strategy: null # used only when weight_tying is True

  data:
    task_name: secondary_structure # options: aav, bind, conservation, gb1, meltome, sav, scl, secondary_structure
    task_type: 'token-level-classification'  # alternative: classification, regression
    preprocessed_data_path: ${oc.env:BIONEMO_HOME}/data/FLIP # path where all preprocessed FLIP datasets are saved
    dataset_path: ${model.data.preprocessed_data_path}/${model.data.task_name} # path to a training data
    dataset:
      train: x000
      val: x000
      test: x000
    sequence_column: "sequence" # name of column with protein sequence in csv file
    target_column: ["3state"] # names of label columns in csv file
    target_sizes: [3] # number of classes in each label
    mask_column: ["resolved"] # names of mask columns in csv file, masks must be 0 or 1
    num_workers: 8
    max_seq_length: ${model.seq_length}
    emb_batch_size: ${model.micro_batch_size}
  
  finetuning_optim: # optimizer parameters for downstream task model
    name: adam
    lr: 0.0001
    betas:
      - 0.9
      - 0.999
    eps: 1e-8
    weight_decay: 0.01
    sched:
      name: WarmupAnnealing
      min_lr: 0.00001
      last_epoch: -1
      warmup_ratio: 10
